import net.masterthought.cucumber.Configuration
import net.masterthought.cucumber.ReportBuilder

buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://repo.bodar.com'
        }
    }
    dependencies {
        classpath 'net.masterthought:cucumber-reporting:3.9.0'
    }
}

plugins {
    id "io.qameta.allure" version "2.5"
}

group 'tx'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}



dependencies {
    compile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '2.1.0'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.11.0'
    testCompile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-testng', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-picocontainer', version: '1.2.5'
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    testCompile group: 'io.qameta.allure', name: 'allure-cucumber-jvm', version: '2.6.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'
}

allure {
    version = '2.6.0'
}

task executeFeatures1(type: Test) {
    doFirst {
        useTestNG()
        options {
            useDefaultListeners = false
            jvmArgs = ['-Dcucumber.options= ' +
                               '--glue com.orangehrm.poc ' +
                               '--plugin pretty ' +
                               '--plugin io.qameta.allure.cucumberjvm.AllureCucumberJvm ' +
            cucumberOptions]
        }
        testLogging.showStandardStreams = true
        scanForTestClasses = false
        ignoreFailures = true
        reports.html.enabled = false
    }
    finalizedBy 'allureReport'
}

task executeFeatures(type: Test) {
    // enable TestNG support (default is JUnit)
    useTestNG()
    options {
        useDefaultListeners = false
        jvmArgs = ['-Dcucumber.options= ' +
                           '--glue com.orangehrm.poc ' +
                           '--plugin pretty ' +
                           '--plugin json:build/cucumber/cucumber.json ' +
                           '--plugin rerun:build/cucumber/rerun.txt ' +
                           cucumberOptions]
        jvmArgs = ['-Dusername=' + username]
        jvmArgs = ['-Dpassword=' + password]
        jvmArgs = ['-Dbrowser=' + browser]
    }

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set JVM arguments for the test JVM(s)
    scanForTestClasses = false

    //turn off Gradle's HTML report to avoid replacing the reports generated by TestNG library:
    reports.html.enabled = false

    doLast {
        generateReport('build/cucumber/cucumber.json', 'build/cucumber/reports')
    }
}

def generateReport(final String pathCucumber, final String pathReport) {
    File reportOutputDirectory = new File(pathReport)
    List<String> jsonReportFiles = new ArrayList<>()
    jsonReportFiles.add(pathCucumber)

    List<String> jsonFiles = new ArrayList<>()
    jsonFiles.add(pathCucumber)

    String buildNumber = '1'
    String projectName = 'cucumber-report'
    boolean runWithJenkins = false
    boolean parallelTesting = false

    Configuration configuration = new Configuration(reportOutputDirectory, projectName)
    // optional configuration
    configuration.setParallelTesting(parallelTesting)
    configuration.setRunWithJenkins(runWithJenkins)
    configuration.setBuildNumber(buildNumber)

    ReportBuilder reportBuilder = new ReportBuilder(jsonFiles, configuration)
    reportBuilder.generateReports()
}